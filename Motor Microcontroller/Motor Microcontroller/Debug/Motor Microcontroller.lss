
Motor Microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000450  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  000004e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000969  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c6  00000000  00000000  00000f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000555  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fb  00000000  00000000  000020ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000024ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 df 01 	call	0x3be	; 0x3be <main>
  9e:	0c 94 26 02 	jmp	0x44c	; 0x44c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z16initialize_usartv>:
	PORTD = 0x00;
	wait(5000,t);
}

void initialize_usart(void) {
	UCSR0B = (1<<RXEN0); // enable serial transmission
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // asynchronous mode; 8-bit; no parity; 1-stop bit
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 0x67; // 9600 baud for FOsc = 16MHz
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b8:	08 95       	ret

000000ba <_Z19delay_T_msec_timer0c>:

			Inputs: None
			Outputs: None
	*/
	
	TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  ba:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 5;  // preload load TIMER0  (count must reach 255-5 = 250)
  bc:	95 e0       	ldi	r25, 0x05	; 5
  be:	96 bd       	out	0x26, r25	; 38

	switch ( choice ) { // choose prescaler
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	61 f0       	breq	.+24     	; 0xdc <_Z19delay_T_msec_timer0c+0x22>
  c4:	18 f4       	brcc	.+6      	; 0xcc <_Z19delay_T_msec_timer0c+0x12>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	31 f0       	breq	.+12     	; 0xd6 <_Z19delay_T_msec_timer0c+0x1c>
  ca:	11 c0       	rjmp	.+34     	; 0xee <_Z19delay_T_msec_timer0c+0x34>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	49 f0       	breq	.+18     	; 0xe2 <_Z19delay_T_msec_timer0c+0x28>
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	51 f0       	breq	.+20     	; 0xe8 <_Z19delay_T_msec_timer0c+0x2e>
  d4:	0c c0       	rjmp	.+24     	; 0xee <_Z19delay_T_msec_timer0c+0x34>
		case 1:
			TCCR0B = 1<<CS11;			//TCCR0B = 0x02; // Start TIMER0, Normal mode, crystal clock, prescaler = 8
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	85 bd       	out	0x25, r24	; 37
		break;
  da:	0b c0       	rjmp	.+22     	; 0xf2 <_Z19delay_T_msec_timer0c+0x38>

		case 2:
			TCCR0B =  1<<CS11 | 1<<CS10;	//TCCR0B = 0x03;  // Start TIMER0, Normal mode, crystal clock, prescaler = 64
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	85 bd       	out	0x25, r24	; 37
		break;
  e0:	08 c0       	rjmp	.+16     	; 0xf2 <_Z19delay_T_msec_timer0c+0x38>

		case 3:
			TCCR0B = 1<<CS12;				//TCCR0B = 0x04; // Start TIMER0, Normal mode, crystal clock, prescaler = 256
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	85 bd       	out	0x25, r24	; 37
		break; 
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <_Z19delay_T_msec_timer0c+0x38>

		case 4:
			TCCR0B = 1<<CS12 | 1<<CS10;	//TCCR0B = 0x05; // Start TIMER0, Normal mode, crystal clock, prescaler = 1024
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	85 bd       	out	0x25, r24	; 37
		break;
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <_Z19delay_T_msec_timer0c+0x38>

		default:
			TCCR0B = 1<<CS10;				//TCCR0B = 0x01; Start TIMER0, Normal mode, crystal clock, no prescaler
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	85 bd       	out	0x25, r24	; 37
		break;
	}
	
	while ((TIFR0 & (0x1<<TOV0)) == 0); // wait for TOV0 to roll over and trigger TOV0 interrupt 
  f2:	a8 9b       	sbis	0x15, 0	; 21
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <_Z19delay_T_msec_timer0c+0x38>

	TCCR0B = 0x00; // Stop TIMER0
  f6:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 0x1<<TOV0; // Clear TOV0 (note that this is an odd bit in that it is cleared
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	08 95       	ret

000000fe <_Z4waitic>:
	UCSR0B = (1<<RXEN0); // enable serial transmission
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // asynchronous mode; 8-bit; no parity; 1-stop bit
	UBRR0L = 0x67; // 9600 baud for FOsc = 16MHz
}

void wait(volatile int multiple, volatile char time_choice) {
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	00 d0       	rcall	.+0      	; 0x104 <_Z4waitic+0x6>
 104:	1f 92       	push	r1
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01
 10e:	6b 83       	std	Y+3, r22	; 0x03

		Inputs: multiple = number of multiples to delay, where multiple is the number of times an actual delay loop is called.
		Outputs: None
	*/

	while (multiple > 0) {
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	9a 81       	ldd	r25, Y+2	; 0x02
 114:	18 16       	cp	r1, r24
 116:	19 06       	cpc	r1, r25
 118:	6c f4       	brge	.+26     	; 0x134 <_Z4waitic+0x36>
		delay_T_msec_timer0(time_choice); 
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	0e 94 5d 00 	call	0xba	; 0xba <_Z19delay_T_msec_timer0c>
		multiple--;
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01

		Inputs: multiple = number of multiples to delay, where multiple is the number of times an actual delay loop is called.
		Outputs: None
	*/

	while (multiple > 0) {
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	18 16       	cp	r1, r24
 130:	19 06       	cpc	r1, r25
 132:	9c f3       	brlt	.-26     	; 0x11a <_Z4waitic+0x1c>
		delay_T_msec_timer0(time_choice); 
		multiple--;
	}
} // end wait()
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <_Z9stepper_1v>:


// ================
// FUNCTIONS
// ================
void stepper_1(void) {
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
	PORTD = 0x00;
 14c:	1b b8       	out	0x0b, r1	; 11
 14e:	c4 e6       	ldi	r28, 0x64	; 100
 150:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<100; i++) {
		PORTD = BLUE_1;
 152:	68 94       	set
 154:	ee 24       	eor	r14, r14
 156:	e2 f8       	bld	r14, 2
		wait(mult,t);
		PORTD = GREEN_1;
 158:	68 94       	set
 15a:	ff 24       	eor	r15, r15
 15c:	f3 f8       	bld	r15, 3
		wait(mult,t);
		PORTD = RED_1;
 15e:	02 e0       	ldi	r16, 0x02	; 2
		wait(mult,t);
		PORTD = BLACK_1;
 160:	10 e1       	ldi	r17, 0x10	; 16
// FUNCTIONS
// ================
void stepper_1(void) {
	PORTD = 0x00;
	for (int i=0; i<100; i++) {
		PORTD = BLUE_1;
 162:	eb b8       	out	0x0b, r14	; 11
		wait(mult,t);
 164:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 168:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 16c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 170:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 174:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTD = GREEN_1;
 178:	fb b8       	out	0x0b, r15	; 11
		wait(mult,t);
 17a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 17e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 182:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 186:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 18a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTD = RED_1;
 18e:	0b b9       	out	0x0b, r16	; 11
		wait(mult,t);
 190:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 194:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 19c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 1a0:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTD = BLACK_1;
 1a4:	1b b9       	out	0x0b, r17	; 11
		wait(mult,t);
 1a6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1aa:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 1b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 1b6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
 1ba:	21 97       	sbiw	r28, 0x01	; 1
// ================
// FUNCTIONS
// ================
void stepper_1(void) {
	PORTD = 0x00;
	for (int i=0; i<100; i++) {
 1bc:	91 f6       	brne	.-92     	; 0x162 <_Z9stepper_1v+0x22>
		PORTD = RED_1;
		wait(mult,t);
		PORTD = BLACK_1;
		wait(mult,t);
	}
	PORTD = 0x00;
 1be:	1b b8       	out	0x0b, r1	; 11
	wait(5000,t);
 1c0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1c4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1c8:	88 e8       	ldi	r24, 0x88	; 136
 1ca:	93 e1       	ldi	r25, 0x13	; 19
 1cc:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <_Z9stepper_2v>:

void stepper_2(void) {
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
	PORTD = 0x00;
 1ea:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00;
 1ec:	15 b8       	out	0x05, r1	; 5
 1ee:	c4 e6       	ldi	r28, 0x64	; 100
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<100; i++) {
		PORTD = BLUE_2;
 1f2:	68 94       	set
 1f4:	ee 24       	eor	r14, r14
 1f6:	e6 f8       	bld	r14, 6
		wait(mult,t);
		PORTD = GREEN_2;
 1f8:	68 94       	set
 1fa:	ff 24       	eor	r15, r15
 1fc:	f7 f8       	bld	r15, 7
		wait(mult,t);
		PORTB = RED_2;
 1fe:	00 e2       	ldi	r16, 0x20	; 32
		PORTB = 0x00;
		wait(mult,t);
		PORTD = BLACK_2;
 200:	11 e0       	ldi	r17, 0x01	; 1

void stepper_2(void) {
	PORTD = 0x00;
	PORTB = 0x00;
	for (int i=0; i<100; i++) {
		PORTD = BLUE_2;
 202:	eb b8       	out	0x0b, r14	; 11
		wait(mult,t);
 204:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 208:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 20c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 210:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 214:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTD = GREEN_2;
 218:	fb b8       	out	0x0b, r15	; 11
		wait(mult,t);
 21a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 21e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 222:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 226:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 22a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTB = RED_2;
 22e:	05 b9       	out	0x05, r16	; 5
		PORTB = 0x00;
 230:	15 b8       	out	0x05, r1	; 5
		wait(mult,t);
 232:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 236:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 23a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 23e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 242:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTD = BLACK_2;
 246:	1b b9       	out	0x0b, r17	; 11
		wait(mult,t);
 248:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 24c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 250:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 254:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 258:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
 25c:	21 97       	sbiw	r28, 0x01	; 1
}

void stepper_2(void) {
	PORTD = 0x00;
	PORTB = 0x00;
	for (int i=0; i<100; i++) {
 25e:	89 f6       	brne	.-94     	; 0x202 <_Z9stepper_2v+0x24>
		PORTB = 0x00;
		wait(mult,t);
		PORTD = BLACK_2;
		wait(mult,t);
	}
	PORTD = 0x00;
 260:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00;
 262:	15 b8       	out	0x05, r1	; 5
	wait(5000,t);
 264:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 268:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 26c:	88 e8       	ldi	r24, 0x88	; 136
 26e:	93 e1       	ldi	r25, 0x13	; 19
 270:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	08 95       	ret

00000282 <_Z9stepper_3v>:

void stepper_3(void) {
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
	PORTC = 0x00;
 28e:	18 b8       	out	0x08, r1	; 8
 290:	c4 e6       	ldi	r28, 0x64	; 100
 292:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<100; i++) {
		PORTC = BLUE_3;
 294:	68 94       	set
 296:	ee 24       	eor	r14, r14
 298:	e3 f8       	bld	r14, 3
		wait(mult,t);
		PORTC = GREEN_3;
 29a:	68 94       	set
 29c:	ff 24       	eor	r15, r15
 29e:	f2 f8       	bld	r15, 2
		wait(mult,t);
		PORTC = RED_3;
 2a0:	00 e1       	ldi	r16, 0x10	; 16
		wait(mult,t);
		PORTC = BLACK_3;
 2a2:	12 e0       	ldi	r17, 0x02	; 2
}

void stepper_3(void) {
	PORTC = 0x00;
	for (int i=0; i<100; i++) {
		PORTC = BLUE_3;
 2a4:	e8 b8       	out	0x08, r14	; 8
		wait(mult,t);
 2a6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2aa:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 2b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 2b6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTC = GREEN_3;
 2ba:	f8 b8       	out	0x08, r15	; 8
		wait(mult,t);
 2bc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2c0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 2c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 2cc:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTC = RED_3;
 2d0:	08 b9       	out	0x08, r16	; 8
		wait(mult,t);
 2d2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2d6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 2de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 2e2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTC = BLACK_3;
 2e6:	18 b9       	out	0x08, r17	; 8
		wait(mult,t);
 2e8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2ec:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 2f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 2f8:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
 2fc:	21 97       	sbiw	r28, 0x01	; 1
	wait(5000,t);
}

void stepper_3(void) {
	PORTC = 0x00;
	for (int i=0; i<100; i++) {
 2fe:	91 f6       	brne	.-92     	; 0x2a4 <_Z9stepper_3v+0x22>
		PORTC = RED_3;
		wait(mult,t);
		PORTC = BLACK_3;
		wait(mult,t);
	}
	PORTC = 0x00;
 300:	18 b8       	out	0x08, r1	; 8
	wait(5000,t);
 302:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 306:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 30a:	88 e8       	ldi	r24, 0x88	; 136
 30c:	93 e1       	ldi	r25, 0x13	; 19
 30e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	08 95       	ret

00000320 <_Z9stepper_4v>:

void stepper_4(void) {
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
	PORTD = 0x00;
 32c:	1b b8       	out	0x0b, r1	; 11
 32e:	c4 e6       	ldi	r28, 0x64	; 100
 330:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<100; i++) {
		PORTB = BLUE_4;
 332:	68 94       	set
 334:	ee 24       	eor	r14, r14
 336:	e3 f8       	bld	r14, 3
		wait(mult,t);
		PORTB = GREEN_4;
 338:	68 94       	set
 33a:	ff 24       	eor	r15, r15
 33c:	f2 f8       	bld	r15, 2
		wait(mult,t);
		PORTB = RED_4;
 33e:	00 e1       	ldi	r16, 0x10	; 16
		wait(mult,t);
		PORTB = BLACK_4;
 340:	12 e0       	ldi	r17, 0x02	; 2
}

void stepper_4(void) {
	PORTD = 0x00;
	for (int i=0; i<100; i++) {
		PORTB = BLUE_4;
 342:	e5 b8       	out	0x05, r14	; 5
		wait(mult,t);
 344:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 348:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 34c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 350:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 354:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTB = GREEN_4;
 358:	f5 b8       	out	0x05, r15	; 5
		wait(mult,t);
 35a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 35e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 362:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 366:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 36a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTB = RED_4;
 36e:	05 b9       	out	0x05, r16	; 5
		wait(mult,t);
 370:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 374:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 378:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 37c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 380:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
		PORTB = BLACK_4;
 384:	15 b9       	out	0x05, r17	; 5
		wait(mult,t);
 386:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 38a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 38e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mult>
 392:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mult+0x1>
 396:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
 39a:	21 97       	sbiw	r28, 0x01	; 1
	wait(5000,t);
}

void stepper_4(void) {
	PORTD = 0x00;
	for (int i=0; i<100; i++) {
 39c:	91 f6       	brne	.-92     	; 0x342 <_Z9stepper_4v+0x22>
		PORTB = RED_4;
		wait(mult,t);
		PORTB = BLACK_4;
		wait(mult,t);
	}
	PORTD = 0x00;
 39e:	1b b8       	out	0x0b, r1	; 11
	wait(5000,t);
 3a0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 3a4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 3a8:	88 e8       	ldi	r24, 0x88	; 136
 3aa:	93 e1       	ldi	r25, 0x13	; 19
 3ac:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4waitic>
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	ef 90       	pop	r14
 3bc:	08 95       	ret

000003be <main>:
void initialize_usart(void);

int main(void)
{
    // PIN SETUP
		DDRB = 0xFF;
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	84 b9       	out	0x04, r24	; 4
		DDRD = 0xFF;
 3c2:	8a b9       	out	0x0a, r24	; 10
		DDRC =
			(0<<DDC5)|(1<<DDC4)|(1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
 3c4:	8f e1       	ldi	r24, 0x1F	; 31
 3c6:	87 b9       	out	0x07, r24	; 7
	
		PORTB = 0x00; // set to 0V
 3c8:	15 b8       	out	0x05, r1	; 5
		PORTC = 0x00; // set to 0V
 3ca:	18 b8       	out	0x08, r1	; 8
		PORTD = 0x00; // set to 0V
 3cc:	1b b8       	out	0x0b, r1	; 11
		#define BLUE_4		_BV(PB3)
		#define GREEN_4		_BV(PB2)
		#define BLACK_4		_BV(PB1)
	
	// ADC SETUP
		PRR = 0x00; // clear Power Reduction ADC bit (0)
 3ce:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		ADCSRA = // set ADC Enable bit, set ADC prescaler to 128
		(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3d2:	87 e8       	ldi	r24, 0x87	; 135
 3d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		ADMUX = // ADC5 MUX Bits 3..0 = 0101
		// left justify (ADLAR = 1) --> ADCH justified
		// AVCC external reference (REF$1 = 0) & (REF$0 = 1)
		(0<<REFS1)|(1<<REFS0)|(1<<ADLAR)|(0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0);
 3d8:	85 e6       	ldi	r24, 0x65	; 101
 3da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		
		// initialize USART with desired parameters
		initialize_usart();
		
		// read analog input
		ADCSRA |= (1<<ADSC); // start analog conversion
 3de:	ca e7       	ldi	r28, 0x7A	; 122
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADIF)) == 0); // wait for conversion to finish
		
		sensor = ADCH; // keep high byte of sensor result
 3e2:	0f 2e       	mov	r0, r31
 3e4:	f9 e7       	ldi	r31, 0x79	; 121
 3e6:	cf 2e       	mov	r12, r31
 3e8:	d1 2c       	mov	r13, r1
 3ea:	f0 2d       	mov	r31, r0
		
		// evaluate sensor results
		
		
		// read in data
		while(! (UCSR0A & (1<<RXC0))); // wait until new data arrives
 3ec:	00 ec       	ldi	r16, 0xC0	; 192
 3ee:	10 e0       	ldi	r17, 0x00	; 0
		select = UDR0;
 3f0:	0f 2e       	mov	r0, r31
 3f2:	f6 ec       	ldi	r31, 0xC6	; 198
 3f4:	ef 2e       	mov	r14, r31
 3f6:	f1 2c       	mov	r15, r1
 3f8:	f0 2d       	mov	r31, r0
    {
		// VARIABLES
		unsigned char select = 0;
		
		// initialize USART with desired parameters
		initialize_usart();
 3fa:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16initialize_usartv>
		
		// read analog input
		ADCSRA |= (1<<ADSC); // start analog conversion
 3fe:	88 81       	ld	r24, Y
 400:	80 64       	ori	r24, 0x40	; 64
 402:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADIF)) == 0); // wait for conversion to finish
 404:	88 81       	ld	r24, Y
 406:	84 ff       	sbrs	r24, 4
 408:	fd cf       	rjmp	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		
		sensor = ADCH; // keep high byte of sensor result
 40a:	f6 01       	movw	r30, r12
 40c:	80 81       	ld	r24, Z
 40e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		
		// evaluate sensor results
		
		
		// read in data
		while(! (UCSR0A & (1<<RXC0))); // wait until new data arrives
 412:	f8 01       	movw	r30, r16
 414:	80 81       	ld	r24, Z
 416:	88 23       	and	r24, r24
 418:	e4 f7       	brge	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		select = UDR0;
 41a:	f7 01       	movw	r30, r14
 41c:	80 81       	ld	r24, Z
		
		// select motor
		switch(select){
 41e:	82 33       	cpi	r24, 0x32	; 50
 420:	61 f0       	breq	.+24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 422:	18 f4       	brcc	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 424:	81 33       	cpi	r24, 0x31	; 49
 426:	31 f0       	breq	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 428:	e8 cf       	rjmp	.-48     	; 0x3fa <main+0x3c>
 42a:	83 33       	cpi	r24, 0x33	; 51
 42c:	49 f0       	breq	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42e:	84 33       	cpi	r24, 0x34	; 52
 430:	51 f0       	breq	.+20     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 432:	e3 cf       	rjmp	.-58     	; 0x3fa <main+0x3c>
			case 49:
				stepper_1();
 434:	0e 94 a0 00 	call	0x140	; 0x140 <_Z9stepper_1v>
					break;
 438:	e0 cf       	rjmp	.-64     	; 0x3fa <main+0x3c>
			case 50:
				stepper_2();
 43a:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z9stepper_2v>
					break;
 43e:	dd cf       	rjmp	.-70     	; 0x3fa <main+0x3c>
			case 51:
				stepper_3();
 440:	0e 94 41 01 	call	0x282	; 0x282 <_Z9stepper_3v>
					break;
 444:	da cf       	rjmp	.-76     	; 0x3fa <main+0x3c>
			case 52:
				stepper_4();
 446:	0e 94 90 01 	call	0x320	; 0x320 <_Z9stepper_4v>
					break;
 44a:	d7 cf       	rjmp	.-82     	; 0x3fa <main+0x3c>

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
